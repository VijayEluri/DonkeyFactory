/* $Id$ */

package chess.engine.search;

import chess.engine.model.Move;
import chess.engine.model.Board;

/**
 * @author Joshua Levine <jlevine@theladders.com>
 * @version $Revision$ $Name$ $Date$
 */
public class PositionHashtable
{
  public static final int UPPER_BOUND = 1;
  public static final int LOWER_BOUND = 0;
  public static final int EXACT_VALUE = 2;

  private static final int HASH_SIZE = (int)(1L << 19);
  private static final int HASH_MASK = HASH_SIZE - 1;

  public static final class HashEntry
  {

    public int depth;
    public long hash = 0;
    public int type = -1;
    public int score = 0;
    public Move move = new Move();
    public boolean mateThreat;

    public void reset()
    {
      depth = 0;
      hash = 0;
      type = -1;
      score = 0;
      mateThreat = false;
      move.moved = null;
    }
  }

  // index128 as [hash_index][fallback]
  private HashEntry[] DEPTH_FIRST_HASH = new HashEntry[HASH_SIZE];
  private HashEntry[] ALWAYS_STORE_HASH = new HashEntry[HASH_SIZE];

  public PositionHashtable()
  {
    for(int t = 0;t < HASH_SIZE;t++)
    {
      DEPTH_FIRST_HASH[t] = new HashEntry();
      ALWAYS_STORE_HASH[t] = new HashEntry();
    }

    clear();
  }

  public final HashEntry getEntry(Board board)
  {
    final long boardHash = board.turn == 1 ? board.hash1 : ~board.hash1;

    final int index = (int)(boardHash & HASH_MASK);

    final PositionHashtable.HashEntry depthFirstEntry = DEPTH_FIRST_HASH[index];
    if(depthFirstEntry.hash == boardHash)
    {
      return depthFirstEntry;
    }

    final PositionHashtable.HashEntry alwaysStoreEntry = ALWAYS_STORE_HASH[index];
    if(alwaysStoreEntry.hash == boardHash)
    {
      return alwaysStoreEntry;
    }


    return null;
  }

  public final void putEntry(int depth, int type, int score, Board board, Move move, boolean mateThreat)
  {
    final long boardHash = board.turn == 1 ? board.hash1 : ~board.hash1;

    final int index = (int)(boardHash & HASH_MASK);

    final HashEntry depthFirstEntry = DEPTH_FIRST_HASH[index];

    if(depth > depthFirstEntry.depth || depthFirstEntry.hash == boardHash)
    {
      depthFirstEntry.hash = boardHash;
      depthFirstEntry.depth = depth;
      depthFirstEntry.score = score;
      depthFirstEntry.type = type;
      depthFirstEntry.move.reset(move);
      depthFirstEntry.mateThreat = mateThreat;
      return;
    }

    final HashEntry alwaysStoreEntry = ALWAYS_STORE_HASH[index];
    alwaysStoreEntry.hash = boardHash;
    alwaysStoreEntry.move.reset(move);
    alwaysStoreEntry.score = score;
    alwaysStoreEntry.type = type;
    alwaysStoreEntry.depth = depth;
    alwaysStoreEntry.mateThreat = mateThreat;
  }

  public final void clear()
  {
    for(int t = 0;t < HASH_SIZE;t++)
    {
      DEPTH_FIRST_HASH[t].reset();
      ALWAYS_STORE_HASH[t].reset();
    }
  }

  public final void age()
  {
    for(int t = 0;t < HASH_SIZE;t++)
    {
      DEPTH_FIRST_HASH[t].depth -= 2;
      ALWAYS_STORE_HASH[t].depth -= 2;
    }
  }
}
